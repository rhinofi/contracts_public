#include "imports/stdlib.fc";
#include "jetton/op-codes.fc";
#include "imports/jetton_utils.fc";
#include "imports/lib.fc";
#include "imports/log.fc";
#include "imports/ton_utils.fc";
#include "imports/constants.fc";
#include "imports/upgrade.fc";

_ load_contract_data() {
  var cs = get_data().begin_parse();
  var res = (
    ;; owner
    ;; /!\ owner should be always the first field in the data
    ;; /!\ otherwise the upgrade will not work
    cs~load_msg_addr(),
    ;; authorized list
    cs~load_dict(),
    ;; deposit limits
    cs~load_dict(),
    ;; global deposits boolean
    cs~load_int(1)
  );
  cs.end_parse();
  return res;
}

;; save_data stores storage variables as a cell into persistent storage
() save_contract_data(slice owner, cell authorized_list, cell deposit_limits, int global_deposits_blocked) impure {
    set_data(
        begin_cell()
            ;; /!\ owner should be always the first field in the data
            ;; /!\ otherwise the upgrade will not work
            .store_slice(owner)
            .store_dict(authorized_list)
            .store_dict(deposit_limits)
            .store_int(global_deposits_blocked, 1)
        .end_cell()
    );
}

(cell) remove_dict_address_key_if_exists(slice key, cell dict) {
    (_, int found) = dict.dict_get?(267, key);
    if(found) {
        dict~dict_delete?(267, key);
    }
    return dict;
}

int is_authorized(addr, authorized_dict) {
    (_, int found) = authorized_dict.dict_get?(267, addr);
    return found;
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice source_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; use a separate flow to skip load_contract_data
    ;; that is to prevent the contract from being locked
    ;; if we store a data that is incompatible with the current code
    if (op == op::upgrade_with_data) {
        upgrade_contract_code_and_data(source_address, in_msg_body);
        reserve_ton(my_balance, msg_value);
        send_all_contract_balance(source_address);
        return ();
    }

    (slice owner, cell authorized_dict, cell deposit_limits_dict, int global_deposits_blocked) = load_contract_data();

    ;; entry point when we receive a jetton transfer notification from our jetton wallet
    ;; this is where jetton deposits are processed
    ;; the jetton forward_ton_amount needs to have enough gas to process the jetton deposit
    ;; insufficient gas will result in the jetton deposit not being processed.
    if(op == op::transfer_notification()) {
        ;; decode jetton transfer notification message
        int jetton_amount = in_msg_body~load_coins();
        slice jetton_sender = in_msg_body~load_msg_addr();
        slice forward_payload = in_msg_body~load_int(1) ? in_msg_body~load_ref().begin_parse() : in_msg_body;
        in_msg_body.end_parse();

        ;; if the forward payload is empty, we ignore the message
        if(forward_payload.slice_empty?()) {
            return ();
        }

        ;; forward payload should contain the 160 bit evm address
        ;; where the backend will credit the deposit to
        var evm_address = forward_payload~load_uint(160);
        forward_payload.end_parse();

        ;; check if the bridge jetton wallet is whitelisted
        var (token_info_cell, found) = deposit_limits_dict.dict_get?(267, source_address);

        ;; security check
        ;; only messages coming from whitelisted jetton wallets are accepted
        ifnot(found) {
            reserve_ton(my_balance, msg_value);
            ;; refund gas to the owner of the wallet that initiated the jetton transfer
            send_all_contract_balance(jetton_sender);
            return (); 
        }
        
        int limit = token_info_cell~load_coins();
        token_info_cell.end_parse();

        ;; if the token exceeds the deposit limit, or deposits are blocked 
        ;; transfer back the jettons to the sender address
        if((jetton_amount > limit) | global_deposits_blocked) {
            ;; lock the contract balance before sending all balance to the source address with mode 128
            reserve_ton(my_balance, msg_value);

            ;; the source address has been already checked against a dictionary
            ;; so it is guaranteed to be a trusted jetton wallet
            var bridge_jetton_wallet = source_address;
            send_jetton(query_id, jetton_amount, bridge_jetton_wallet, jetton_sender, jetton_sender, 1, 0, 128);
            return ();
        }

        cell payload = 
            begin_cell()
                .store_slice(jetton_sender)
                .store_uint(evm_address, 160)
                .store_slice(source_address)
                .store_coins(jetton_amount)
            .end_cell();

        var msg_body = 
            begin_cell()
                .store_uint(log::deposit_jetton, 32)
                .store_ref(payload)
            .end_cell();

        emit_log(msg_body.begin_parse());

        ;; send remaining TON after fees back to the jetton sender
        reserve_ton(my_balance,msg_value);
        send_all_contract_balance(jetton_sender);
        return ();
    }

    if(op == op::deposit_native) {
        int evm_address = in_msg_body~load_uint(160);
        int amount = in_msg_body~load_coins();
        in_msg_body.end_parse();

        ;; deposit limits for TON are under contract address key
        var (token_info_cell, found) = deposit_limits_dict.dict_get?(267, my_address());
        ;; if the key is not found, TON deposits are disabled, refund the TON to the depositor
        ifnot(found) {
            reserve_ton(my_balance,msg_value);
            send_all_contract_balance(source_address);
            return ();
        }

        int limit = token_info_cell~load_coins();
        ;; if the amount exceeds the deposit limit, or deposits are blocked, refund the TON to the depositor
        if((amount > limit) | global_deposits_blocked) {
            reserve_ton(my_balance,msg_value);
            send_all_contract_balance(source_address);
            return ();
        }

        ;; the specified amount in the message body should be less
        ;; than the TON coins attached in the message
        if(amount > msg_value) {
            throw(errorCode::insufficient_balance);
        }
        var msg_body = 
            begin_cell()
                .store_uint(log::deposit_native, 32)
                .store_slice(source_address)
                .store_uint(evm_address, 160)
                .store_coins(amount)
            .end_cell();

        emit_log(msg_body.begin_parse());

        reserve_ton_with_deposit(my_balance, msg_value, amount);
        send_all_contract_balance(source_address);
        return ();
    }

    ;; only authorized addresses can withdraw Jettons
    if (op == op::withdraw_jetton) {
        ifnot(is_authorized(source_address,authorized_dict)) {
            throw(errorCode::unauthorized);
        }
        slice contract_jetton_wallet = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        slice destination_jetton_wallet = in_msg_body~load_msg_addr();
        slice response_destination = in_msg_body~load_msg_addr();
        int forward_ton_amount = in_msg_body~load_coins();
        in_msg_body.end_parse();

        if(my_balance - msg_value - forward_ton_amount < const::min_contract_balance) {
            throw(errorCode::insufficient_balance);
        }
        
        reserve_ton_with_withdrawal(my_balance, msg_value, forward_ton_amount);
        send_jetton(query_id, amount, contract_jetton_wallet, destination_jetton_wallet, response_destination, forward_ton_amount, 0, 128);
        return ();
    }

    ;; only authorized addresses can withdraw TON
    if (op == op::withdraw_native) {
        ifnot(is_authorized(source_address,authorized_dict)) {
            throw(errorCode::unauthorized);
        }
        slice withdrawal_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        in_msg_body.end_parse();

        if(my_balance - msg_value - amount < const::min_contract_balance) {
            throw(errorCode::insufficient_balance);
        }

        reserve_ton_with_withdrawal(my_balance, msg_value, amount);
        send_ton(withdrawal_address, amount, begin_cell().end_cell(), 1);
        send_all_contract_balance(source_address);
        return ();
    }

    ;; admin functions

    ;; set deposit limit for a jetton wallet
    ;; format is key(jetton_wallet_address) -> value(deposit_limit_for_jetton_wallet)
    ;; current contract address (my_address()) is used as special address key to set TON deposits limits
    ;; other addresses refer to the bridge jetton wallet (not jetton master)
    if(op == op::set_deposit_limit) {
        ifnot(is_authorized(source_address,authorized_dict)) {
            throw(errorCode::unauthorized);
        }
        var jetton_wallet_address = in_msg_body~load_msg_addr();
        ;; use '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' to disable limits
        int limit = in_msg_body~load_coins();
        in_msg_body.end_parse();

        deposit_limits_dict~dict_set(267, jetton_wallet_address, begin_cell().store_coins(limit).end_cell().begin_parse());
        save_contract_data(owner, authorized_dict, deposit_limits_dict, global_deposits_blocked);
        reserve_ton(my_balance, msg_value);
        send_all_contract_balance(source_address);
        return ();
    }

    ;; -1 -> forbid all deposits
    ;; 0 -> resume deposits, restrictions on deposit limits and allowed tokens apply
    ;;      restrictions are set with op::set_deposit_limit
    if(op == op::block_global_deposits) {
        ifnot(is_authorized(source_address,authorized_dict)) {
            throw(errorCode::unauthorized);
        }
        var global_deposits_blocked = in_msg_body~load_int(1);
        in_msg_body.end_parse();
        save_contract_data(owner, authorized_dict, deposit_limits_dict, global_deposits_blocked);
        reserve_ton(my_balance, msg_value);
        send_all_contract_balance(source_address);
        return ();
    }

    ;; only the owner can set authorized addresses
    if(op == op::authorize) {
        ifnot(equal_slice_bits(source_address, owner)) {
            throw(errorCode::unauthorized);
        }
        slice authorized_address = in_msg_body~load_msg_addr();
        int authorized = in_msg_body~load_int(1);

        ifnot(authorized) {
            authorized_dict = remove_dict_address_key_if_exists(authorized_address, authorized_dict);
        } else {
            authorized_dict~dict_set(267, authorized_address, begin_cell().end_cell().begin_parse());
        }
        save_contract_data(owner, authorized_dict, deposit_limits_dict, global_deposits_blocked);
        reserve_ton(my_balance, msg_value);
        send_all_contract_balance(source_address);
        return();
    }

    if(op == op::transfer_ownership) {
        ifnot(equal_slice_bits(source_address, owner)) {
            throw(errorCode::unauthorized);
        }
        var new_owner = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        save_contract_data(new_owner, authorized_dict, deposit_limits_dict, global_deposits_blocked);
        reserve_ton(my_balance, msg_value);
        send_all_contract_balance(source_address);
        return();
    }


    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

(slice, cell, cell, int) get_contract_data() method_id {
    return load_contract_data();
}

int is_address_authorized(slice addr) method_id {
    (_, cell authorized_dict, _, _) = load_contract_data();
    return is_authorized(addr, authorized_dict);
}

int are_global_deposits_blocked() method_id {
    (_, _, _, int global_deposits_blocked) = load_contract_data();
    return global_deposits_blocked;
}

(int, int) get_deposit_limit(slice jetton_wallet_address) method_id {
    (_, _, cell deposit_limits_dict, _) = load_contract_data();
    (slice deposit_limit, int found) = deposit_limits_dict.dict_get?(267, jetton_wallet_address);
    ifnot (found) {
        return (0, false);
    }
    return (deposit_limit~load_coins(), true);
}

slice get_owner() method_id {
    (slice owner, _, _, _) = load_contract_data();
    return owner;
}

int balance() method_id {
    var [int balance, _] = get_balance();
    return balance;
}